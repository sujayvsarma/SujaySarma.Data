using SujaySarma.Data.Core.Constants;

using System;

namespace SujaySarma.Data.Core
{
    /// <summary>
    /// Defines a data container member, for example a column in a table.
    /// </summary>
    /// <remarks>
    ///     This is a simple implementation of the <see cref="IMemberTypeAttribute" /> interface and can be used by all
    ///     data storage and retrieval libraries when they need only the default properties.
    /// </remarks>
    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Interface, AllowMultiple = false, Inherited = true)]
    public class ContainerMemberAttribute : Attribute, IMemberTypeAttribute
    {
        /// <summary>
        /// The name of the underlying column (eg: name of the table column).
        /// </summary>
        public string Name { get; init; }

        /// <summary>
        /// Controls the inclusion of a column/field in data-modification
        /// (insert, update and delete) operations.
        /// </summary>
        public ColumnInclusionStrategy IncludeFor { get; set; }

        /// <summary>
        /// When the value of the property or field is an <seealso cref="Enum" /> type, this value controls
        /// how that column is serialised.
        /// </summary>
        public EnumSerializationStrategy IfEnumSerialiseAs { get; set; }

        /// <summary>
        /// When set, this column shall act as a key in the WHERE clause.
        /// </summary>
        public bool IsSearchKey { get; set; }

        /// <summary>
        /// When set on a complex type or a type where we have no data-conversion implementation,
        /// allows the property or field value use Json for storage and retrieval. Setting this value
        /// to TRUE makes sense only if the underlying column/field is a <seealso cref="string" /> type.
        /// </summary>
        public bool SerialiseAsJson { get; set; }

        /// <summary>
        /// This function is called to retrieve the usable name for the container-member. Implementing attributes can use it
        /// to apply prefixes, suffixes or even contextually modify the value of the <see cref="Name" /> property to
        /// provide a different or better name for the operation.
        /// </summary>
        /// <returns>The qualified or usable name to use for the container-member</returns>
        public virtual string CreateQualifiedName() => Name;

        /// <summary>
        /// This function will be called to retrieve a value for the property or field when one is not set on it. The implementing
        /// attribute may provide a usable value in such a case. This can be used to provide an "Autogenerated" value for fields
        /// that are meant to be "keys" of some nature.
        /// </summary>
        public Func<object>? DefaultValueProviderFunction { get; set; }

        /// <summary>
        /// Defines a data container member, for example a column in a table.
        /// </summary>
        /// <param name="name">The name of the underlying column (eg: name of the table column).</param>
        public ContainerMemberAttribute(string name)
        {
            Name = ((!string.IsNullOrWhiteSpace(name)) ? name : throw new ArgumentNullException(nameof(name), "Argument cannot be a Null, empty or whitespace string."));
            IncludeFor = ColumnInclusionStrategy.InsertUpdateAndDelete;
            IfEnumSerialiseAs = EnumSerializationStrategy.AsInt;
            SerialiseAsJson = true;
            IsSearchKey = false;

            DefaultValueProviderFunction = null;
        }

        /// <summary>
        /// Defines a data container member, for example a column in a table.
        /// </summary>
        /// <remarks>
        ///     This constructor lets you have an empty <see cref="Name" />.
        /// </remarks>
        protected ContainerMemberAttribute()
        {
            Name = string.Empty;
            IncludeFor = ColumnInclusionStrategy.InsertUpdateAndDelete;
            IfEnumSerialiseAs = EnumSerializationStrategy.AsInt;
            SerialiseAsJson = true;
            IsSearchKey = false;

            DefaultValueProviderFunction = null;
        }
    }
}